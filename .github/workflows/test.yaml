name: Tedt codegen

on:
  # Manually trigger the workflow for testing purposes
  workflow_dispatch:
    inputs:
      release_version:
        type: string
        required: true
  # Listen for the release-created event which is triggered by the webapp deploy action. https://github.com/peter-evans/repository-dispatch helps to implement Event-based communication between workflows.
  repository_dispatch:
      types: [release-created]
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      SLEEP_DURATION: 5s
      SWAGGER_URL: https://app.statflo.com/api/doc.json
      RELEASE_VERSION: ${{ inputs.release_version }} 
      
    steps:
      - name: Wait for environment-defined duration
        run: sleep $SLEEP_DURATION
        shell: bash

      - name: Set release version from webapp's release
        if: github.event.client_payload.release_version != ''
        run: echo "RELEASE_VERSION=${{ github.event.client_payload.release_version }}" >> $GITHUB_ENV

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      # This step is used to pull the client info from the Dispatcher
      # - name: Pull client info 
      #   env:
      #     PAYLOAD_CONTEXT: ${{ toJson(github.event.client_payload) }}
      #   run: echo "$PAYLOAD_CONTEXT"

      - name: Generate code from Swagger file
        run: |
          java -jar ./bin/swagger-codegen-cli-3.0.62.jar generate -i $SWAGGER_URL -l java -o . \
          --invoker-package com.statflo.client \
          --model-package com.statflo.client.model \
          --api-package com.statflo.client.api \
          --additional-properties groupId=com.statflo,artifactId=statflo-java-sdk

      - name: Commit and Push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Update generated SDK (run number: ${GITHUB_RUN_NUMBER})"
          git push origin main

      - name: Create a release tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create new tag and push
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}

          gh release create ${{ env.RELEASE_VERSION }} --title "Release ${{ env.RELEASE_VERSION }}" --notes "Auto-generated release for ${{ env.RELEASE_VERSION }}"
